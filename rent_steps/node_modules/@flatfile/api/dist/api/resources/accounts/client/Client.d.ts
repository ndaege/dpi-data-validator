/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
export declare namespace Accounts {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Accounts {
    protected readonly _options: Accounts.Options;
    constructor(_options?: Accounts.Options);
    /**
     * Get the current account
     *
     * @example
     *     await flatfile.accounts.getCurrent()
     */
    getCurrent(requestOptions?: Accounts.RequestOptions): Promise<Flatfile.AccountResponse>;
    /**
     * Update the current account
     *
     * @example
     *     await flatfile.accounts.updateCurrent({
     *         defaultAppId: "us_app_YOUR_ID"
     *     })
     */
    updateCurrent(request: Flatfile.AccountPatch, requestOptions?: Accounts.RequestOptions): Promise<Flatfile.AccountResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
