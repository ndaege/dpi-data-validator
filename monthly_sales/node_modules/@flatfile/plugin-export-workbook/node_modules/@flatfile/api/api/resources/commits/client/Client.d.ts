/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
export declare namespace Commits {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Commits {
    protected readonly _options: Commits.Options;
    constructor(_options?: Commits.Options);
    /**
     * Returns the details of a commit version
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.commits.get("us_vr_YOUR_ID")
     */
    get(commitId: Flatfile.CommitId, requestOptions?: Commits.RequestOptions): Promise<Flatfile.CommitResponse>;
    /**
     * Completes a commit version. This marks the commit as complete and acknowledges that the changes have been applied to the sheet.
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    complete(commitId: Flatfile.CommitId, requestOptions?: Commits.RequestOptions): Promise<Flatfile.Success>;
    /**
     * Replays a commit:created event.
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    replay(commitId: Flatfile.CommitId, requestOptions?: Commits.RequestOptions): Promise<Flatfile.Success>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
