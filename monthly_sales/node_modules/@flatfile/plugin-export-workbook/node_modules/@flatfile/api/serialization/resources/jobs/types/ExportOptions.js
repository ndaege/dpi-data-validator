"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExportOptions = void 0;
const core = __importStar(require("../../../../core"));
const VersionId_1 = require("../../commons/types/VersionId");
const CommitId_1 = require("../../commons/types/CommitId");
const SortField_1 = require("../../commons/types/SortField");
const SortDirection_1 = require("../../commons/types/SortDirection");
const Filter_1 = require("../../commons/types/Filter");
const FilterField_1 = require("../../commons/types/FilterField");
const SearchValue_1 = require("../../commons/types/SearchValue");
const SearchField_1 = require("../../commons/types/SearchField");
const RecordId_1 = require("../../commons/types/RecordId");
exports.ExportOptions = core.serialization.object({
    versionId: VersionId_1.VersionId.optional(),
    commitId: CommitId_1.CommitId.optional(),
    sortField: SortField_1.SortField.optional(),
    sortDirection: SortDirection_1.SortDirection.optional(),
    filter: Filter_1.Filter.optional(),
    filterField: FilterField_1.FilterField.optional(),
    searchValue: SearchValue_1.SearchValue.optional(),
    searchField: SearchField_1.SearchField.optional(),
    q: core.serialization.string().optional(),
    ids: core.serialization.list(RecordId_1.RecordId).optional(),
});
