/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
export declare namespace Environments {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Environments {
    protected readonly _options: Environments.Options;
    constructor(_options?: Environments.Options);
    /**
     * Get all environments
     *
     * @example
     *     await flatfile.environments.list()
     */
    list(request?: Flatfile.ListEnvironmentsRequest, requestOptions?: Environments.RequestOptions): Promise<Flatfile.ListEnvironmentsResponse>;
    /**
     * Create a new environment
     *
     * @example
     *     await flatfile.environments.create({
     *         name: "dev",
     *         isProd: false,
     *         guestAuthentication: [Flatfile.GuestAuthenticationEnum.MagicLink],
     *         metadata: {
     *             "key": "value"
     *         },
     *         namespaces: ["default"]
     *     })
     */
    create(request: Flatfile.EnvironmentConfigCreate, requestOptions?: Environments.RequestOptions): Promise<Flatfile.EnvironmentResponse>;
    /**
     * Get a token which can be used to subscribe to events for this environment
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.environments.getEnvironmentEventToken({
     *         environmentId: "us_env_YOUR_ID"
     *     })
     */
    getEnvironmentEventToken(request: Flatfile.GetEnvironmentEventTokenRequest, requestOptions?: Environments.RequestOptions): Promise<Flatfile.EventTokenResponse>;
    /**
     * Returns a single environment
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.environments.get("us_env_YOUR_ID")
     */
    get(environmentId: string, requestOptions?: Environments.RequestOptions): Promise<Flatfile.EnvironmentResponse>;
    /**
     * Updates a single environment, to change the name for example
     *
     * @example
     *     await flatfile.environments.update("us_env_YOUR_ID", {
     *         name: "dev",
     *         isProd: false,
     *         guestAuthentication: [Flatfile.GuestAuthenticationEnum.MagicLink],
     *         metadata: {
     *             "key": "value"
     *         },
     *         namespaces: ["default"]
     *     })
     */
    update(environmentId: string, request: Flatfile.EnvironmentConfigUpdate, requestOptions?: Environments.RequestOptions): Promise<Flatfile.Environment>;
    /**
     * Deletes a single environment
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    delete(environmentId: string, requestOptions?: Environments.RequestOptions): Promise<Flatfile.Success>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
