/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
export declare namespace Documents {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Documents {
    protected readonly _options: Documents.Options;
    constructor(_options?: Documents.Options);
    /**
     * Returns all documents for a space
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.documents.list("us_sp_YOUR_ID")
     */
    list(spaceId: Flatfile.SpaceId, requestOptions?: Documents.RequestOptions): Promise<Flatfile.ListDocumentsResponse>;
    /**
     * Add a new document to the space
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.documents.create("us_sp_YOUR_ID", {
     *         title: "My Document 1",
     *         body: "My information",
     *         actions: [{
     *                 operation: "submitAction",
     *                 mode: Flatfile.ActionMode.Foreground,
     *                 label: "Submit",
     *                 description: "Submit data to webhook.site",
     *                 primary: true
     *             }]
     *     })
     */
    create(spaceId: Flatfile.SpaceId, request: Flatfile.DocumentConfig, requestOptions?: Documents.RequestOptions): Promise<Flatfile.DocumentResponse>;
    /**
     * Returns a single document
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.documents.get("us_sp_YOUR_ID", "us_dc_YOUR_ID")
     */
    get(spaceId: Flatfile.SpaceId, documentId: Flatfile.DocumentId, requestOptions?: Documents.RequestOptions): Promise<Flatfile.DocumentResponse>;
    /**
     * updates a single document, for only the body and title
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.documents.update("us_sp_YOUR_ID", "us_dc_YOUR_ID", {
     *         title: "Updated Title",
     *         body: "Updated My information"
     *     })
     */
    update(spaceId: Flatfile.SpaceId, documentId: Flatfile.DocumentId, request: Flatfile.DocumentConfig, requestOptions?: Documents.RequestOptions): Promise<Flatfile.DocumentResponse>;
    /**
     * Deletes a single document
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    delete(spaceId: Flatfile.SpaceId, documentId: Flatfile.DocumentId, requestOptions?: Documents.RequestOptions): Promise<Flatfile.Success>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
