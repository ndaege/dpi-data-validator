/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
export declare namespace Spaces {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Spaces {
    protected readonly _options: Spaces.Options;
    constructor(_options?: Spaces.Options);
    /**
     * Returns all spaces for an account or environment
     * @throws {@link Flatfile.BadRequestError}
     *
     * @example
     *     await flatfile.spaces.list({
     *         environmentId: "us_env_YOUR_ID"
     *     })
     */
    list(request?: Flatfile.ListSpacesRequest, requestOptions?: Spaces.RequestOptions): Promise<Flatfile.ListSpacesResponse>;
    /**
     * Creates a new space based on an existing Space Config
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.spaces.create({
     *         name: "My First Workbook",
     *         displayOrder: 1,
     *         environmentId: "us_env_YOUR_ID",
     *         primaryWorkbookId: "us_wb_YOUR_ID"
     *     })
     */
    create(request: Flatfile.SpaceConfig, requestOptions?: Spaces.RequestOptions): Promise<Flatfile.SpaceResponse>;
    /**
     * Returns a single space
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.spaces.get("us_sp_YOUR_ID")
     */
    get(spaceId: Flatfile.SpaceId, requestOptions?: Spaces.RequestOptions): Promise<Flatfile.SpaceResponse>;
    /**
     * Delete a space
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.spaces.delete("us_sp_YOUR_ID")
     */
    delete(spaceId: Flatfile.SpaceId, requestOptions?: Spaces.RequestOptions): Promise<Flatfile.Success>;
    /**
     * Delete multiple spaces by id
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.spaces.bulkDelete({
     *         spaceIds: "us_sp_YOUR_ID"
     *     })
     */
    bulkDelete(request: Flatfile.DeleteSpacesRequest, requestOptions?: Spaces.RequestOptions): Promise<Flatfile.Success>;
    /**
     * Update a space, to change the name for example
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.spaces.update("us_sp_YOUR_ID", {
     *         name: "My Updated Worbook"
     *     })
     */
    update(spaceId: Flatfile.SpaceId, request: Flatfile.SpaceConfig, requestOptions?: Spaces.RequestOptions): Promise<Flatfile.SpaceResponse>;
    /**
     * Sets archivedAt timestamp on a space
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.spaces.archiveSpace("us_sp_YOUR_ID")
     */
    archiveSpace(spaceId: Flatfile.SpaceId, requestOptions?: Spaces.RequestOptions): Promise<Flatfile.Success>;
    /**
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    upgrade(spaceId: Flatfile.SpaceId, request: Flatfile.UpgradeSpaceConfig, requestOptions?: Spaces.RequestOptions): Promise<Flatfile.SpaceResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
