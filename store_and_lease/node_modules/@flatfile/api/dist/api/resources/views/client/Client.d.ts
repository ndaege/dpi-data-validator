/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
export declare namespace Views {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Views {
    protected readonly _options: Views.Options;
    constructor(_options?: Views.Options);
    /**
     * Returns all views for the sheet
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.views.list({
     *         sheetId: "us_sh_YOUR_ID"
     *     })
     */
    list(request: Flatfile.ListViewsRequest, requestOptions?: Views.RequestOptions): Promise<Flatfile.ListViewsResponse>;
    /**
     * Add a new view to the space
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.views.create({
     *         sheetId: "us_sh_YOUR_ID",
     *         name: "My View",
     *         config: {
     *             filter: Flatfile.Filter.Error,
     *             filterField: "email",
     *             q: "firstname like %John%",
     *             sortField: "email",
     *             sortDirection: Flatfile.SortDirection.Asc
     *         }
     *     })
     */
    create(request: Flatfile.ViewCreate, requestOptions?: Views.RequestOptions): Promise<Flatfile.ViewResponse>;
    /**
     * Returns a single view
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.views.get("us_vi_YOUR_ID")
     */
    get(viewId: Flatfile.ViewId, requestOptions?: Views.RequestOptions): Promise<Flatfile.ViewResponse>;
    /**
     * Updates a single view
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.views.update("us_vi_YOUR_ID", {
     *         name: "My View",
     *         config: {
     *             filter: Flatfile.Filter.Error,
     *             filterField: "email",
     *             q: "firstname like %John%",
     *             sortField: "email",
     *             sortDirection: Flatfile.SortDirection.Asc
     *         }
     *     })
     */
    update(viewId: Flatfile.ViewId, request: Flatfile.ViewUpdate, requestOptions?: Views.RequestOptions): Promise<Flatfile.ViewResponse>;
    /**
     * Deletes a single view
     *
     * @example
     *     await flatfile.views.delete("us_vi_YOUR_ID")
     */
    delete(viewId: Flatfile.ViewId, requestOptions?: Views.RequestOptions): Promise<Flatfile.Success>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
