/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
export declare namespace Users {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Users {
    protected readonly _options: Users.Options;
    constructor(_options?: Users.Options);
    /**
     * Gets a list of users
     *
     * @example
     *     await flatfile.users.list({
     *         email: "john.smith@example.com"
     *     })
     */
    list(request?: Flatfile.ListUsersRequest, requestOptions?: Users.RequestOptions): Promise<Flatfile.ListUsersResponse>;
    /**
     * Creates and invites a new user to your account.
     *
     * @example
     *     await flatfile.users.createAndInvite({
     *         email: "john.smith@example.com",
     *         name: "John Smith",
     *         actorRoles: [{
     *                 roleId: "us_rol_YOUR_ID",
     *                 resourceId: "us_acc_YOUR_ID"
     *             }, {
     *                 roleId: "us_rol_YOUR_ID",
     *                 resourceId: "us_env_YOUR_ID"
     *             }]
     *     })
     */
    createAndInvite(request: Flatfile.UserCreateAndInviteRequest, requestOptions?: Users.RequestOptions): Promise<Flatfile.UserWithRolesResponse>;
    /**
     * Updates a user
     */
    update(userId: Flatfile.UserId, request?: Flatfile.UpdateUserRequest, requestOptions?: Users.RequestOptions): Promise<Flatfile.UserResponse>;
    /**
     * Gets a user
     *
     * @example
     *     await flatfile.users.get("us_usr_YOUR_ID")
     */
    get(userId: Flatfile.UserId, requestOptions?: Users.RequestOptions): Promise<Flatfile.UserResponse>;
    /**
     * Deletes a user
     */
    delete(userId: Flatfile.UserId, requestOptions?: Users.RequestOptions): Promise<Flatfile.Success>;
    /**
     * Lists roles assigned to a user.
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     * @throws {@link Flatfile.ForbiddenError}
     */
    listUserRoles(userId: Flatfile.UserId, requestOptions?: Users.RequestOptions): Promise<Flatfile.ListActorRolesResponse>;
    /**
     * Assigns a role to a user.
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     * @throws {@link Flatfile.ForbiddenError}
     */
    assignUserRole(userId: Flatfile.UserId, request: Flatfile.AssignActorRoleRequest, requestOptions?: Users.RequestOptions): Promise<Flatfile.AssignRoleResponse>;
    /**
     * Removes a role from a user.
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     * @throws {@link Flatfile.ForbiddenError}
     */
    deleteUserRole(userId: Flatfile.UserId, actorRoleId: Flatfile.ActorRoleId, requestOptions?: Users.RequestOptions): Promise<Flatfile.Success>;
    /**
     * Gets all the api tokens for a user.
     */
    listApiTokens(userId: Flatfile.UserId, request: Flatfile.ListApiTokensRequest, requestOptions?: Users.RequestOptions): Promise<Flatfile.ListApiTokensResponse>;
    /**
     * Creates an api token for authenticating against Flatfile APIs.
     */
    createApiToken(userId: Flatfile.UserId, request: Flatfile.CreateApiTokenRequest, requestOptions?: Users.RequestOptions): Promise<Flatfile.ApiTokenResponse>;
    /**
     * Exchange an invitation for an access token
     */
    exchangeToken(request?: Flatfile.ExchangeTokenRequest, requestOptions?: Users.RequestOptions): Promise<Flatfile.ExchangeTokenResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
