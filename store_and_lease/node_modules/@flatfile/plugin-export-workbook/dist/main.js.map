{"mappings":"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","sources":["plugins/export-workbook/src/index.ts","plugins/export-workbook/src/plugin.ts"],"sourcesContent":["import type { FlatfileListener } from '@flatfile/listener'\nimport { PluginOptions, exportRecords } from './plugin'\n\n/**\n * Export records plugin for Flatfile.\n *\n * @param opts - plugin config options\n */\nexport const exportRecordsPlugin = (opts: PluginOptions = {}) => {\n  return (listener: FlatfileListener) => {\n    listener.on(\n      'job:ready',\n      { job: opts.jobName || 'workbook:downloadWorkbook' },\n      async (event) => {\n        await exportRecords(event, opts)\n      }\n    )\n  }\n}\n\nexport { exportRecordsPlugin as exportWorkbookPlugin }\n","import type { Flatfile } from '@flatfile/api'\nimport api from '@flatfile/api'\nimport type { FlatfileEvent } from '@flatfile/listener'\nimport { logError, logInfo, processRecords } from '@flatfile/util-common'\nimport * as fs from 'fs'\nimport path from 'path'\nimport * as R from 'remeda'\nimport * as XLSX from 'xlsx'\n\n/**\n * Plugin config options.\n *\n * @property {string[]} excludedSheets - list of sheet names to exclude from the exported data.\n * @property {string[]} excludeFields - list of field names to exclude from the exported data. This applies to all sheets.\n * @property {Flatfile.Filter} recordFilter - filter to apply to the records before exporting.\n * @property {boolean} includeRecordIds - include record ids in the exported data.\n * @property {boolean} debug - show helpul messages useful for debugging (use intended for development).\n */\nexport interface PluginOptions {\n  readonly jobName?: string\n  readonly excludedSheets?: string[]\n  readonly excludeFields?: string[]\n  readonly recordFilter?: Flatfile.Filter\n  readonly includeRecordIds?: boolean\n  readonly debug?: boolean\n}\n\n/**\n * Runs extractor and creates an `.xlsx` file with all Flatfile Workbook data.\n *\n * @param event - Flatfile event\n * @param options - plugin config options\n */\nexport const exportRecords = async (\n  event: FlatfileEvent,\n  options: PluginOptions\n): Promise<void> => {\n  const { environmentId, jobId, spaceId, workbookId } = event.context\n\n  try {\n    const { data: workbook } = await api.workbooks.get(workbookId)\n    const { data: sheets } = await api.sheets.list({ workbookId })\n    const fileName = sanitizeFileName(workbook.name)\n\n    if (options.debug) {\n      const meta = R.pipe(\n        sheets,\n        R.reduce((acc, sheet) => {\n          return acc + `\\n\\t'${sheet.name}' (${sheet.id})`\n        }, '')\n      )\n\n      logInfo(\n        '@flatfile/plugin-export-workbook',\n        `Sheets found in Flatfile workbook: ${meta}`\n      )\n    }\n\n    const xlsxWorkbook = XLSX.utils.book_new()\n\n    try {\n      await api.jobs.ack(jobId, {\n        info: 'Starting job to write to Excel file',\n        progress: 10,\n      })\n\n      for (const [sheetIndex, sheet] of sheets.entries()) {\n        if (options.excludedSheets?.includes(sheet.config.slug)) {\n          if (options.debug) {\n            logInfo(\n              '@flatfile/plugin-export-workbook',\n              `Skipping sheet: ${sheet.name}`\n            )\n          }\n          continue\n        }\n        try {\n          let results = await processRecords<Record<string, any>[]>(\n            sheet.id,\n            (records): Record<string, any>[] => {\n              return R.pipe(\n                records,\n                R.map(\n                  ({\n                    id: recordId,\n                    values: row,\n                  }: {\n                    id: string\n                    values: any\n                  }) => {\n                    const rowValue = R.pipe(\n                      Object.keys(row),\n                      R.reduce((acc, colName) => {\n                        if (options.excludeFields?.includes(colName)) {\n                          return acc\n                        }\n                        const formatCell = (cellValue: Flatfile.CellValue) => {\n                          const { value, messages } = cellValue\n                          const cell: XLSX.CellObject = {\n                            t: 's',\n                            v: value,\n                            c: [],\n                          }\n                          if (R.length(messages) > 0) {\n                            cell.c = messages.map((m) => ({\n                              a: 'Flatfile',\n                              t: `[${m.type.toUpperCase()}]: ${m.message}`,\n                              T: true,\n                            }))\n                            cell.c.hidden = true\n                          }\n\n                          return cell\n                        }\n\n                        return {\n                          ...acc,\n                          [colName]: formatCell(row[colName]),\n                        }\n                      }, {})\n                    )\n                    return options?.includeRecordIds\n                      ? {\n                          recordId,\n                          ...rowValue,\n                        }\n                      : rowValue\n                  }\n                )\n              )\n            },\n            {\n              filter: options.recordFilter,\n            }\n          )\n          if (!results || results.every((group) => group.length === 0)) {\n            const emptyCell: XLSX.CellObject = {\n              t: 's',\n              v: '',\n              c: [],\n            }\n            results = [\n              sheet.config.fields.map((field) => ({ [field.key]: emptyCell })),\n            ]\n          }\n          const rows = results.flat()\n\n          const worksheet = XLSX.utils.json_to_sheet(rows)\n\n          XLSX.utils.book_append_sheet(\n            xlsxWorkbook,\n            worksheet,\n            sanitizeExcelSheetName(sheet.name, sheetIndex)\n          )\n        } catch (_getRecordsError: unknown) {\n          logError(\n            '@flatfile/plugin-export-workbook',\n            `Failed to fetch records for sheet with id: ${sheet.id}`\n          )\n\n          await api.jobs.fail(jobId, {\n            outcome: {\n              message: `Failed to fetch records for sheet with id: ${sheet.id}`,\n            },\n          })\n\n          return\n        }\n      }\n    } catch (_jobAckError: unknown) {\n      logError(\n        '@flatfile/plugin-export-workbook',\n        `Failed to acknowledge job with id: ${jobId}`\n      )\n\n      await api.jobs.fail(jobId, {\n        outcome: {\n          message: `Failed to acknowledge job with id: ${jobId}`,\n        },\n      })\n\n      return\n    }\n\n    // Lambdas only allow writing to /tmp directory\n    const timestamp = new Date().toISOString()\n    const filePath = path.join('/tmp', `${fileName}-${timestamp}.xlsx`)\n\n    if (xlsxWorkbook.SheetNames.length === 0) {\n      if (options.debug) {\n        logError(\n          '@flatfile/plugin-export-workbook',\n          'No data to write to Excel file'\n        )\n      }\n\n      await api.jobs.fail(jobId, {\n        outcome: {\n          message:\n            'Job failed because there were no data to write to Excel file.',\n        },\n      })\n\n      return\n    }\n\n    try {\n      XLSX.set_fs(fs)\n      XLSX.writeFile(xlsxWorkbook, filePath)\n\n      if (options.debug) {\n        logInfo('@flatfile/plugin-export-workbook', 'File written to disk')\n      }\n    } catch (_writeError: unknown) {\n      logError(\n        '@flatfile/plugin-export-workbook',\n        'Failed to write file to disk'\n      )\n\n      await api.jobs.fail(jobId, {\n        outcome: {\n          message:\n            'Job failed because it could not write the Excel Workbook to disk.',\n        },\n      })\n\n      return\n    }\n\n    try {\n      const reader = fs.createReadStream(filePath)\n\n      await api.files.upload(reader, {\n        spaceId,\n        environmentId,\n        mode: 'export',\n      })\n\n      reader.close()\n\n      await fs.promises.unlink(filePath)\n\n      if (options.debug) {\n        logInfo(\n          '@flatfile/plugin-export-workbook',\n          `Excel document uploaded. View file at https://spaces.flatfile.com/space/${spaceId}/files?mode=export`\n        )\n      }\n    } catch (_uploadError: unknown) {\n      logError('@flatfile/plugin-export-workbook', 'Failed to upload file')\n\n      await api.jobs.fail(jobId, {\n        outcome: {\n          message: 'Job failed because it could not upload Excel file.',\n        },\n      })\n\n      return\n    }\n\n    try {\n      await api.jobs.complete(jobId, {\n        outcome: {\n          acknowledge: true,\n          message:\n            'Data was successfully written to Excel file and uploaded. You can access the workbook in the \"Available Downloads\" section of the Files page in Flatfile.',\n          next: {\n            type: 'id',\n            id: spaceId,\n            path: 'files',\n            query: 'mode=export',\n            label: 'See all downloads',\n          },\n        },\n      })\n\n      if (options.debug) {\n        logInfo('@flatfile/plugin-export-workbook', 'Done')\n      }\n    } catch (_jobError: unknown) {\n      logError('@flatfile/plugin-export-workbook', 'Failed to complete job')\n\n      await api.jobs.fail(jobId, {\n        outcome: {\n          message: 'Failed to complete job.',\n        },\n      })\n\n      return\n    }\n  } catch (_fetchSheetsError: unknown) {\n    logError(\n      '@flatfile/plugin-export-workbook',\n      `Failed to fetch sheets for workbook id: ${workbookId}`\n    )\n\n    await api.jobs.fail(jobId, {\n      outcome: {\n        message: `Failed to fetch sheets for workbook id: ${workbookId}`,\n      },\n    })\n\n    return\n  }\n}\n\nfunction sanitizeFileName(fileName: string): string {\n  // List of invalid characters that are commonly not allowed in file names\n  const invalidChars = /[\\/\\?%\\*:|\"<>]/g\n\n  // Remove invalid characters\n  let cleanFileName = fileName.replace(invalidChars, '_')\n\n  // Remove emojis and other non-ASCII characters\n  cleanFileName = cleanFileName.replace(/[^\\x00-\\x7F]/g, '')\n\n  return cleanFileName\n}\n\nfunction sanitizeExcelSheetName(name: string, index: number): string {\n  // Regular expression to match unsupported Excel characters\n  const invalidChars = /[\\\\\\/\\?\\*\\[\\]:<>|\"]/g\n\n  // Remove unsupported characters and trim leading or trailing spaces\n  let sanitized = name.replace(invalidChars, '').trim()\n\n  // Remove leading or trailing apostrophes\n  sanitized = sanitized.replace(/^'+|'+$/g, '')\n\n  // Truncate to 31 characters, the maximum length for Excel sheet names\n  if (sanitized.length > 31) {\n    sanitized = sanitized.substring(0, 31)\n  }\n\n  // If the sheet name is empty, use a default name based on index (i.e. \"Sheet1\")\n  if (sanitized.length === 0) {\n    sanitized = `Sheet${index + 1}` //index is 0-based, default sheet names should be 1-based\n  }\n\n  return sanitized\n}\n\n/**\n * Generates the alpha pattern [\"A\", \"B\", ... \"AA\", \"AB\", ..., \"AAA\", \"AAB\", ...] to help\n * with accessing cells in a worksheet.\n *\n * @param length - multiple of 26\n */\nconst genCyclicPattern = (length: number = 104): Array<string> => {\n  let alphaPattern: Array<string> = []\n\n  for (let i = 0; i < length; i++) {\n    let columnName = ''\n    let j = i\n    while (j >= 0) {\n      columnName = String.fromCharCode(65 + (j % 26)) + columnName // 65 is ASCII for 'A'\n      j = Math.floor(j / 26) - 1\n    }\n    alphaPattern.push(columnName)\n  }\n\n  return alphaPattern\n}\n"],"names":[],"version":3,"file":"main.js.map","sourceRoot":"../../../"}