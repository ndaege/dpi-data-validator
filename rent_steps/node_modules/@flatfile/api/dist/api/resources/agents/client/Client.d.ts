/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
export declare namespace Agents {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Agents {
    protected readonly _options: Agents.Options;
    constructor(_options?: Agents.Options);
    list(request: Flatfile.ListAgentsRequest, requestOptions?: Agents.RequestOptions): Promise<Flatfile.ListAgentsResponse>;
    /**
     * @throws {@link Flatfile.BadRequestError}
     *
     * @example
     *     await flatfile.agents.create({
     *         environmentId: "us_env_YOUR_ID",
     *         body: {
     *             topics: [Flatfile.EventTopic.WorkbookUpdated],
     *             compiler: Flatfile.Compiler.Js,
     *             source: "module.exports = { routeEvent: async (...args) => { console.log(args) } }"
     *         }
     *     })
     *
     * @example
     *     await flatfile.agents.create({
     *         environmentId: "us_env_YOUR_ID",
     *         body: {
     *             topics: [Flatfile.EventTopic.WorkbookUpdated],
     *             compiler: Flatfile.Compiler.Js,
     *             source: "module.exports = { routeEvent: async (...args) => { console.log(args) } }"
     *         }
     *     })
     */
    create(request: Flatfile.CreateAgentsRequest, requestOptions?: Agents.RequestOptions): Promise<Flatfile.AgentResponse>;
    /**
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.agents.get("us_ag_YOUR_ID", {
     *         environmentId: "us_env_YOUR_ID"
     *     })
     */
    get(agentId: Flatfile.AgentId, request: Flatfile.GetAgentRequest, requestOptions?: Agents.RequestOptions): Promise<Flatfile.AgentResponse>;
    /**
     * Lists roles assigned to an agent.
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     * @throws {@link Flatfile.ForbiddenError}
     */
    listAgentRoles(agentId: Flatfile.AgentId, requestOptions?: Agents.RequestOptions): Promise<Flatfile.ListActorRolesResponse>;
    /**
     * Assigns a role to a agent.
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     * @throws {@link Flatfile.ForbiddenError}
     */
    assignAgentRole(agentId: Flatfile.AgentId, request: Flatfile.AssignActorRoleRequest, requestOptions?: Agents.RequestOptions): Promise<Flatfile.AssignRoleResponse>;
    /**
     * Removes a role from an agent.
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     * @throws {@link Flatfile.ForbiddenError}
     */
    deleteAgentRole(agentId: Flatfile.AgentId, actorRoleId: Flatfile.ActorRoleId, requestOptions?: Agents.RequestOptions): Promise<Flatfile.Success>;
    /**
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.agents.getAgentLogs("us_ag_YOUR_ID", {
     *         environmentId: "us_env_YOUR_ID"
     *     })
     */
    getAgentLogs(agentId: Flatfile.AgentId, request: Flatfile.GetAgentLogsRequest, requestOptions?: Agents.RequestOptions): Promise<Flatfile.GetAgentLogsResponse>;
    /**
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.agents.getAgentLog("commons.EventId", {
     *         environmentId: "us_env_YOUR_ID"
     *     })
     */
    getAgentLog(eventId: Flatfile.EventId, request: Flatfile.GetAgentLogRequest, requestOptions?: Agents.RequestOptions): Promise<Flatfile.GetDetailedAgentLogResponse>;
    /**
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.agents.getEnvironmentAgentLogs({
     *         environmentId: "us_env_YOUR_ID",
     *         spaceId: "us_sp_YOUR_ID",
     *         success: true,
     *         pageSize: 20,
     *         pageNumber: 1
     *     })
     */
    getEnvironmentAgentLogs(request: Flatfile.GetEnvironmentAgentLogsRequest, requestOptions?: Agents.RequestOptions): Promise<Flatfile.GetDetailedAgentLogsResponse>;
    /**
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.agents.getEnvironmentAgentExecutions({
     *         environmentId: "us_env_YOUR_ID",
     *         spaceId: "us_sp_YOUR_ID",
     *         success: true,
     *         pageSize: 20,
     *         pageNumber: 1
     *     })
     */
    getEnvironmentAgentExecutions(request: Flatfile.GetEnvironmentAgentExecutionsRequest, requestOptions?: Agents.RequestOptions): Promise<Flatfile.GetExecutionsResponse>;
    /**
     * Deletes a single agent
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.agents.delete("us_ag_YOUR_ID", {
     *         environmentId: "us_env_YOUR_ID"
     *     })
     */
    delete(agentId: Flatfile.AgentId, request: Flatfile.DeleteAgentRequest, requestOptions?: Agents.RequestOptions): Promise<Flatfile.Success>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
