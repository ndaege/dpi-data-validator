/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
export declare namespace Workbooks {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Workbooks {
    protected readonly _options: Workbooks.Options;
    constructor(_options?: Workbooks.Options);
    /**
     * Returns all workbooks matching a filter for an account or space
     * @throws {@link Flatfile.BadRequestError}
     *
     * @example
     *     await flatfile.workbooks.list({
     *         spaceId: "us_sp_YOUR_ID"
     *     })
     */
    list(request?: Flatfile.ListWorkbooksRequest, requestOptions?: Workbooks.RequestOptions): Promise<Flatfile.ListWorkbooksResponse>;
    /**
     * Creates a workbook and adds it to a space
     * @throws {@link Flatfile.BadRequestError}
     *
     * @example
     *     await flatfile.workbooks.create({
     *         name: "My First Workbook",
     *         sheets: [{
     *                 name: "Contacts",
     *                 slug: "contacts",
     *                 fields: [{
     *                         type: "string",
     *                         key: "firstName",
     *                         label: "First Name"
     *                     }, {
     *                         type: "string",
     *                         key: "lastName",
     *                         label: "Last Name"
     *                     }, {
     *                         type: "string",
     *                         key: "email",
     *                         label: "Email"
     *                     }],
     *                 mappingConfidenceThreshold: 0.5
     *             }],
     *         labels: ["simple-demo"],
     *         actions: [{
     *                 operation: "submitAction",
     *                 mode: Flatfile.ActionMode.Foreground,
     *                 label: "Submit",
     *                 description: "Submit data to webhook.site",
     *                 primary: true
     *             }],
     *         settings: {
     *             trackChanges: true
     *         }
     *     })
     */
    create(request: Flatfile.CreateWorkbookConfig, requestOptions?: Workbooks.RequestOptions): Promise<Flatfile.WorkbookResponse>;
    /**
     * Returns a single workbook
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.workbooks.get("us_wb_YOUR_ID")
     */
    get(workbookId: Flatfile.WorkbookId, requestOptions?: Workbooks.RequestOptions): Promise<Flatfile.WorkbookResponse>;
    /**
     * Deletes a workbook and all of its record data permanently
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.workbooks.delete("us_wb_YOUR_ID")
     */
    delete(workbookId: Flatfile.WorkbookId, requestOptions?: Workbooks.RequestOptions): Promise<Flatfile.Success>;
    /**
     * Updates a workbook
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.workbooks.update("us_wb_YOUR_ID", {
     *         name: "My Updated Workbook",
     *         labels: ["my-new-label"],
     *         actions: [{
     *                 operation: "submitAction",
     *                 mode: Flatfile.ActionMode.Foreground,
     *                 label: "Submit Changes",
     *                 description: "Submit data to webhook.site",
     *                 primary: true
     *             }]
     *     })
     */
    update(workbookId: Flatfile.WorkbookId, request: Flatfile.WorkbookUpdate, requestOptions?: Workbooks.RequestOptions): Promise<Flatfile.WorkbookResponse>;
    /**
     * Returns the commits for a workbook
     *
     * @example
     *     await flatfile.workbooks.getWorkbookCommits("us_wb_YOUR_ID")
     */
    getWorkbookCommits(workbookId: Flatfile.WorkbookId, request?: Flatfile.ListWorkbookCommitsRequest, requestOptions?: Workbooks.RequestOptions): Promise<Flatfile.ListCommitsResponse>;
    /**
     * Rebuild a workbook
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    rebuildWorkbook(workbookId: Flatfile.WorkbookId, requestOptions?: Workbooks.RequestOptions): Promise<Flatfile.Success>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
