/**
 * This file was auto-generated by Fern from our API Definition.
 */
/// <reference types="node" />
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
import * as stream from "stream";
export declare namespace Sheets {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Sheets {
    protected readonly _options: Sheets.Options;
    constructor(_options?: Sheets.Options);
    /**
     * Returns sheets in a workbook
     *
     * @example
     *     await flatfile.sheets.list({
     *         workbookId: "us_wb_YOUR_ID"
     *     })
     */
    list(request: Flatfile.ListSheetsRequest, requestOptions?: Sheets.RequestOptions): Promise<Flatfile.ListSheetsResponse>;
    /**
     * Returns a sheet in a workbook
     *
     * @example
     *     await flatfile.sheets.get("us_sh_YOUR_ID")
     */
    get(sheetId: Flatfile.SheetId, requestOptions?: Sheets.RequestOptions): Promise<Flatfile.SheetResponse>;
    /**
     * Deletes a specific sheet from a workbook
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.sheets.delete("us_sh_YOUR_ID")
     */
    delete(sheetId: Flatfile.SheetId, requestOptions?: Sheets.RequestOptions): Promise<Flatfile.Success>;
    /**
     * Trigger data hooks and validation to run on a sheet
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.sheets.validate("us_sh_YOUR_ID")
     */
    validate(sheetId: Flatfile.SheetId, requestOptions?: Sheets.RequestOptions): Promise<Flatfile.Success>;
    /**
     * Returns records from a sheet in a workbook as a csv file
     */
    getRecordsAsCsv(sheetId: Flatfile.SheetId, request?: Flatfile.GetRecordsCsvRequest, requestOptions?: Sheets.RequestOptions): Promise<stream.Readable>;
    /**
     * Returns counts of records from a sheet
     *
     * @example
     *     await flatfile.sheets.getRecordCounts("us_sh_YOUR_ID", {
     *         versionId: "us_vr_YOUR_ID"
     *     })
     */
    getRecordCounts(sheetId: Flatfile.SheetId, request?: Flatfile.GetRecordCountsRequest, requestOptions?: Sheets.RequestOptions): Promise<Flatfile.RecordCountsResponse>;
    /**
     * Adds a new field to a sheet
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    addField(sheetId: Flatfile.SheetId, request: Flatfile.Property, requestOptions?: Sheets.RequestOptions): Promise<Flatfile.FieldConfigResponse>;
    /**
     * Returns the commit versions for a sheet
     *
     * @example
     *     await flatfile.sheets.getSheetCommits("us_sh_YOUR_ID")
     */
    getSheetCommits(sheetId: Flatfile.SheetId, request?: Flatfile.ListSheetCommitsRequest, requestOptions?: Sheets.RequestOptions): Promise<Flatfile.ListCommitsResponse>;
    /**
     * Locks a sheet
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.sheets.lockSheet("us_sh_YOUR_ID")
     */
    lockSheet(sheetId: Flatfile.SheetId, requestOptions?: Sheets.RequestOptions): Promise<Flatfile.Success>;
    /**
     * Removes a lock from a sheet
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.sheets.unlockSheet("us_sh_YOUR_ID")
     */
    unlockSheet(sheetId: Flatfile.SheetId, requestOptions?: Sheets.RequestOptions): Promise<Flatfile.Success>;
    /**
     * Returns record cell values grouped by all fields in the sheet
     *
     * @example
     *     await flatfile.sheets.getCellValues("us_sh_YOUR_ID", {
     *         distinct: true,
     *         fieldKey: "firstName",
     *         sortField: "firstName",
     *         sortDirection: Flatfile.SortDirection.Asc,
     *         filter: Flatfile.Filter.Valid
     *     })
     */
    getCellValues(sheetId: Flatfile.SheetId, request: Flatfile.GetFieldValuesRequest, requestOptions?: Sheets.RequestOptions): Promise<Flatfile.CellsResponse>;
    /**
     * Updates Sheet
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.sheets.updateSheet("us_sh_YOUR_ID", {
     *         name: "New Sheet Name",
     *         metadata: {
     *             "rowHeaders": [
     *                 6
     *             ]
     *         }
     *     })
     */
    updateSheet(sheetId: Flatfile.SheetId, request: Flatfile.SheetUpdateRequest, requestOptions?: Sheets.RequestOptions): Promise<Flatfile.SheetResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
