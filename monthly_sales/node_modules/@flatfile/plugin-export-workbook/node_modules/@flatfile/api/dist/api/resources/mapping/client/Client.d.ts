/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
export declare namespace Mapping {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Mapping {
    protected readonly _options: Mapping.Options;
    constructor(_options?: Mapping.Options);
    /**
     * Creates a list of mapping rules based on two provided schemas
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    createMappingProgram(request: Flatfile.ProgramConfig, requestOptions?: Mapping.RequestOptions): Promise<Flatfile.ProgramResponse>;
    /**
     * Deletes all history for the authenticated user
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    deleteAllHistoryForUser(request?: Flatfile.DeleteAllHistoryForUserRequest, requestOptions?: Mapping.RequestOptions): Promise<Flatfile.Success>;
    /**
     * List all mapping programs
     * @throws {@link Flatfile.BadRequestError}
     */
    listMappingPrograms(request?: Flatfile.ListProgramsRequest, requestOptions?: Mapping.RequestOptions): Promise<Flatfile.ProgramsResponse>;
    /**
     * Get a mapping program
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    getMappingProgram(programId: Flatfile.ProgramId, requestOptions?: Mapping.RequestOptions): Promise<Flatfile.ProgramResponse>;
    /**
     * Updates a mapping program
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    updateMappingProgram(programId: Flatfile.ProgramId, request: Flatfile.ProgramConfig, requestOptions?: Mapping.RequestOptions): Promise<Flatfile.ProgramResponse>;
    /**
     * Deletes a mapping program
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    deleteMappingProgram(programId: Flatfile.ProgramId, requestOptions?: Mapping.RequestOptions): Promise<Flatfile.Success>;
    /**
     * Add mapping rules to a program
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    createRules(programId: Flatfile.ProgramId, request: Flatfile.CreateMappingRulesRequest, requestOptions?: Mapping.RequestOptions): Promise<Flatfile.MappingRulesResponse>;
    /**
     * Deletes multiple mapping rules from a program
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    deleteMultipleRules(programId: Flatfile.ProgramId, request: Flatfile.DeleteMultipleRulesRequest, requestOptions?: Mapping.RequestOptions): Promise<Flatfile.Success>;
    /**
     * List all mapping rules in a program
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.mapping.listRules("us_mp_YOUR_ID")
     */
    listRules(programId: Flatfile.ProgramId, requestOptions?: Mapping.RequestOptions): Promise<Flatfile.MappingRulesResponse>;
    /**
     * Get a mapping rule from a program
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.mapping.getRule("us_mp_YOUR_ID", "us_mr_YOUR_ID")
     */
    getRule(programId: Flatfile.ProgramId, mappingId: Flatfile.MappingId, requestOptions?: Mapping.RequestOptions): Promise<Flatfile.MappingRuleResponse>;
    /**
     * Updates a mapping rule in a program
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.mapping.updateRule("us_mp_YOUR_ID", "us_mr_YOUR_ID", {
     *         name: "Assign mapping rule",
     *         type: "assign",
     *         config: {},
     *         metadata: {}
     *     })
     */
    updateRule(programId: Flatfile.ProgramId, mappingId: Flatfile.MappingId, request: Flatfile.MappingRuleConfig, requestOptions?: Mapping.RequestOptions): Promise<Flatfile.MappingRuleResponse>;
    /**
     * Updates a list of mapping rules in a program
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    updateRules(programId: Flatfile.ProgramId, request: Flatfile.UpdateMappingRulesRequest, requestOptions?: Mapping.RequestOptions): Promise<Flatfile.MappingRulesResponse>;
    /**
     * Deletes a mapping rule from a program
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.mapping.deleteRule("us_mp_YOUR_ID", "us_mr_YOUR_ID")
     */
    deleteRule(programId: Flatfile.ProgramId, mappingId: Flatfile.MappingId, requestOptions?: Mapping.RequestOptions): Promise<Flatfile.Success>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
