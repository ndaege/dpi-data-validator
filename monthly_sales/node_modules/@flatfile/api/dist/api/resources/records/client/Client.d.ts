/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
export declare namespace Records {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Records {
    protected readonly _options: Records.Options;
    constructor(_options?: Records.Options);
    /**
     * Returns records from a sheet in a workbook
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.records.get("us_sh_YOUR_ID")
     */
    get(sheetId: Flatfile.SheetId, request?: Flatfile.GetRecordsRequest, requestOptions?: Records.RequestOptions): Promise<Flatfile.GetRecordsResponse>;
    /**
     * Updates existing records in a workbook sheet
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.records.update("us_sh_YOUR_ID", [{
     *             id: "us_rc_YOUR_ID",
     *             versionId: "us_vr_YOUR_ID",
     *             commitId: "us_vr_YOUR_ID",
     *             values: {
     *                 "firstName": {
     *                     value: "John",
     *                     messages: [],
     *                     valid: true
     *                 },
     *                 "lastName": {
     *                     value: "Smith",
     *                     messages: [],
     *                     valid: true
     *                 },
     *                 "email": {
     *                     value: "john.smith@example.com",
     *                     messages: [],
     *                     valid: true
     *                 }
     *             },
     *             valid: true,
     *             metadata: {},
     *             config: {}
     *         }])
     */
    update(sheetId: Flatfile.SheetId, request: Flatfile.Records, requestOptions?: Records.RequestOptions): Promise<Flatfile.VersionResponse>;
    /**
     * Adds records to a workbook sheet
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.records.insert("us_sh_YOUR_ID", [{
     *             "firstName": {
     *                 value: "John",
     *                 messages: [],
     *                 valid: true
     *             },
     *             "lastName": {
     *                 value: "Smith",
     *                 messages: [],
     *                 valid: true
     *             },
     *             "email": {
     *                 value: "john.smith@example.com",
     *                 messages: [],
     *                 valid: true
     *             }
     *         }])
     */
    insert(sheetId: Flatfile.SheetId, request: Flatfile.RecordData[], requestOptions?: Records.RequestOptions): Promise<Flatfile.RecordsResponse>;
    /**
     * Deletes records from a workbook sheet
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.records.delete("us_sh_YOUR_ID", {
     *         ids: "us_rc_YOUR_ID"
     *     })
     */
    delete(sheetId: Flatfile.SheetId, request: Flatfile.DeleteRecordsRequest, requestOptions?: Records.RequestOptions): Promise<Flatfile.Success>;
    /**
     * Searches for all values that match the 'find' value (globally or for a specific field via 'fieldKey') and replaces them with the 'replace' value. Wrap 'find' value in double quotes for exact match (""). Returns a commitId for the updated records
     *
     * @example
     *     await flatfile.records.findAndReplace("us_sh_YOUR_ID", {
     *         fieldKey: "email"
     *     })
     */
    findAndReplace(sheetId: Flatfile.SheetId, request: Flatfile.FindAndReplaceRecordRequest, requestOptions?: Records.RequestOptions): Promise<Flatfile.VersionResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
