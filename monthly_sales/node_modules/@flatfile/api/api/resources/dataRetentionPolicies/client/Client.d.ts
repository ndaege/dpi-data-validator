/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
export declare namespace DataRetentionPolicies {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class DataRetentionPolicies {
    protected readonly _options: DataRetentionPolicies.Options;
    constructor(_options?: DataRetentionPolicies.Options);
    /**
     * Returns all data retention policies on an account matching a filter for environmentId
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.dataRetentionPolicies.list({
     *         environmentId: "us_env_YOUR_ID"
     *     })
     */
    list(request?: Flatfile.ListDataRetentionPoliciesRequest, requestOptions?: DataRetentionPolicies.RequestOptions): Promise<Flatfile.ListDataRetentionPoliciesResponse>;
    /**
     * Add a new data retention policy to the space
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.dataRetentionPolicies.create({
     *         type: Flatfile.DataRetentionPolicyEnum.LastActivity,
     *         period: 5,
     *         environmentId: "us_env_YOUR_ID"
     *     })
     */
    create(request: Flatfile.DataRetentionPolicyConfig, requestOptions?: DataRetentionPolicies.RequestOptions): Promise<Flatfile.DataRetentionPolicyResponse>;
    /**
     * Returns a single data retention policy
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.dataRetentionPolicies.get("us_drp_YOUR_ID")
     */
    get(id: Flatfile.DataRetentionPolicyId, requestOptions?: DataRetentionPolicies.RequestOptions): Promise<Flatfile.DataRetentionPolicyResponse>;
    /**
     * Updates a single data retention policy
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.dataRetentionPolicies.update("us_drp_YOUR_ID", {
     *         type: Flatfile.DataRetentionPolicyEnum.LastActivity,
     *         period: 5,
     *         environmentId: "us_env_YOUR_ID"
     *     })
     */
    update(id: Flatfile.DataRetentionPolicyId, request: Flatfile.DataRetentionPolicyConfig, requestOptions?: DataRetentionPolicies.RequestOptions): Promise<Flatfile.DataRetentionPolicyResponse>;
    /**
     * Deletes a single data retention policy
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    delete(id: Flatfile.DataRetentionPolicyId, requestOptions?: DataRetentionPolicies.RequestOptions): Promise<Flatfile.Success>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
