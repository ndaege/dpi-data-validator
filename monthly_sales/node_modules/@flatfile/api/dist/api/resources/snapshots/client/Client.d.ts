/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
export declare namespace Snapshots {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Snapshots {
    protected readonly _options: Snapshots.Options;
    constructor(_options?: Snapshots.Options);
    /**
     * Creates a snapshot of a sheet
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.snapshots.createSnapshot({
     *         sheetId: "us_sh_YOUR_ID",
     *         label: "My snapshot"
     *     })
     */
    createSnapshot(request: Flatfile.CreateSnapshotRequest, requestOptions?: Snapshots.RequestOptions): Promise<Flatfile.SnapshotResponse>;
    /**
     * List all snapshots of a sheet
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.snapshots.listSnapshots({
     *         sheetId: "us_sh_YOUR_ID"
     *     })
     */
    listSnapshots(request: Flatfile.ListSnapshotRequest, requestOptions?: Snapshots.RequestOptions): Promise<Flatfile.SnapshotsResponse>;
    /**
     * Gets a snapshot of a sheet
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.snapshots.getSnapshot("us_ss_YOUR_ID", {
     *         includeSummary: true
     *     })
     */
    getSnapshot(snapshotId: Flatfile.SnapshotId, request: Flatfile.GetSnapshotRequest, requestOptions?: Snapshots.RequestOptions): Promise<Flatfile.SnapshotResponse>;
    /**
     * Deletes a snapshot of a sheet
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.snapshots.deleteSnapshot("us_ss_YOUR_ID")
     */
    deleteSnapshot(snapshotId: Flatfile.SnapshotId, requestOptions?: Snapshots.RequestOptions): Promise<Flatfile.Success>;
    /**
     * Restores a snapshot of a sheet
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.snapshots.restoreSnapshot("us_ss_YOUR_ID", {
     *         created: true,
     *         updated: true,
     *         deleted: true
     *     })
     */
    restoreSnapshot(snapshotId: Flatfile.SnapshotId, request?: Flatfile.RestoreOptions, requestOptions?: Snapshots.RequestOptions): Promise<Flatfile.SnapshotResponse>;
    /**
     * Gets records from a snapshot of a sheet
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.snapshots.getSnapshotRecords("us_ss_YOUR_ID", {
     *         pageSize: 10,
     *         pageNumber: 1,
     *         changeType: Flatfile.ChangeType.CreatedSince
     *     })
     */
    getSnapshotRecords(snapshotId: Flatfile.SnapshotId, request?: Flatfile.GetSnapshotRecordsRequest, requestOptions?: Snapshots.RequestOptions): Promise<Flatfile.DiffRecordsResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
