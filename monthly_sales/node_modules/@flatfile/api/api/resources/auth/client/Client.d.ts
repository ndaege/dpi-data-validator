/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
export declare namespace Auth {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Auth {
    protected readonly _options: Auth.Options;
    constructor(_options?: Auth.Options);
    /**
     * Exchange credentials for an access token. Credentials can be a Client ID and Secret or an Email and Password
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.auth.createAccessToken({
     *         type: "userCredentials",
     *         email: "yourEmail@example.com",
     *         password: "yourSuper$ecurePassw0rd"
     *     })
     */
    createAccessToken(request: Flatfile.Credentials, requestOptions?: Auth.RequestOptions): Promise<Flatfile.AccessToken>;
    /**
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.auth.getApiKeys({
     *         environmentId: "us_env_YOUR_ID"
     *     })
     */
    getApiKeys(request: Flatfile.GetApiKeysRequest, requestOptions?: Auth.RequestOptions): Promise<Flatfile.ApiKeysResponse>;
    /**
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.auth.createNewApiKey({
     *         environmentId: "us_env_YOUR_ID",
     *         type: Flatfile.ApiKeyType.Publishable
     *     })
     */
    createNewApiKey(request: Flatfile.CreateNewApiKeyRequest, requestOptions?: Auth.RequestOptions): Promise<Flatfile.ApiKeysResponse>;
    /**
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.auth.deleteApiKey({
     *         environmentId: "us_env_YOUR_ID",
     *         key: "us_key_YOUR_ID"
     *     })
     */
    deleteApiKey(request: Flatfile.DeleteApiKeyRequest, requestOptions?: Auth.RequestOptions): Promise<Flatfile.Success>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
