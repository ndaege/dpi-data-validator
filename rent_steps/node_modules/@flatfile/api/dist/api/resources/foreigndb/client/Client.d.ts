/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
export declare namespace Foreigndb {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Foreigndb {
    protected readonly _options: Foreigndb.Options;
    constructor(_options?: Foreigndb.Options);
    /**
     * Restore a database from a backup
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    restore(workbookId: string, request: Flatfile.RestoreDatabaseRequest, requestOptions?: Foreigndb.RequestOptions): Promise<Flatfile.RestoreDatabaseResponse>;
    /**
     * Get database user credentials
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    getDatabaseUser(workbookId: string, requestOptions?: Foreigndb.RequestOptions): Promise<Flatfile.GetDatabaseUserResponse>;
    /**
     * Get the database information
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    getDatabaseInfo(workbookId: string, requestOptions?: Foreigndb.RequestOptions): Promise<Flatfile.GetDatabaseResponse>;
    /**
     * Delete the database
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    deleteDatabase(workbookId: string, requestOptions?: Foreigndb.RequestOptions): Promise<Flatfile.Success>;
    /**
     * Persist a file in s3 object storage
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    upload(workbookId: string, request: Flatfile.UploadToObjectStorageRequest, requestOptions?: Foreigndb.RequestOptions): Promise<Flatfile.Success>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
