/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
export declare namespace Secrets {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Secrets {
    protected readonly _options: Secrets.Options;
    constructor(_options?: Secrets.Options);
    /**
     * Fetch all secrets for a given environmentId and optionally apply space overrides
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.secrets.list({
     *         environmentId: "us_env_YOUR_ID"
     *     })
     */
    list(request?: Flatfile.ListSecrets, requestOptions?: Secrets.RequestOptions): Promise<Flatfile.SecretsResponse>;
    /**
     * Insert or Update a Secret by name for environment or space
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.secrets.upsert({
     *         name: "My Secret",
     *         value: "Sup3r$ecret\\/alue!",
     *         environmentId: "us_env_YOUR_ID",
     *         spaceId: "us_sp_YOUR_ID"
     *     })
     */
    upsert(request: Flatfile.WriteSecret, requestOptions?: Secrets.RequestOptions): Promise<Flatfile.SecretsResponse>;
    /**
     * Deletes a specific Secret from the Environment or Space as is the case
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.secrets.delete("us_sec_YOUR_ID")
     */
    delete(secretId: Flatfile.SecretId, requestOptions?: Secrets.RequestOptions): Promise<Flatfile.SecretsResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
