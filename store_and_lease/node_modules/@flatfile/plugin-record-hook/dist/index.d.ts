import { FlatfileRecord } from '@flatfile/hooks';
export { FlatfileRecord } from '@flatfile/hooks';
import { FlatfileEvent, FlatfileListener } from '@flatfile/listener';

interface RecordHookOptions {
    concurrency?: number;
    debug?: boolean;
}
declare const RecordHook: (event: FlatfileEvent, handler: (record: FlatfileRecord, event?: FlatfileEvent) => any | Promise<any>, options?: RecordHookOptions) => Promise<void>;
interface BulkRecordHookOptions {
    chunkSize?: number;
    parallel?: number;
    debug?: boolean;
}
declare const BulkRecordHook: (event: FlatfileEvent, handler: (records: FlatfileRecord[], event?: FlatfileEvent) => any | Promise<any>, options?: BulkRecordHookOptions) => Promise<void>;

declare const recordHookPlugin: (sheetSlug: string, callback: (record: FlatfileRecord, event?: FlatfileEvent) => any | Promise<any>, options?: RecordHookOptions) => (listener: FlatfileListener) => void;
declare const bulkRecordHookPlugin: (sheetSlug: string, callback: (records: FlatfileRecord[], event?: FlatfileEvent) => any | Promise<any>, options?: BulkRecordHookOptions) => (listener: FlatfileListener) => void;

export { BulkRecordHook, type BulkRecordHookOptions, RecordHook, type RecordHookOptions, bulkRecordHookPlugin as bulkRecordHook, bulkRecordHookPlugin, recordHookPlugin as recordHook, recordHookPlugin };
