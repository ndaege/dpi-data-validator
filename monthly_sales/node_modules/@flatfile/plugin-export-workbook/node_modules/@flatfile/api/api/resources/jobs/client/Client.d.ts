/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
export declare namespace Jobs {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Jobs {
    protected readonly _options: Jobs.Options;
    constructor(_options?: Jobs.Options);
    list(request?: Flatfile.ListJobsRequest, requestOptions?: Jobs.RequestOptions): Promise<Flatfile.ListJobsResponse>;
    create(request: Flatfile.JobConfig, requestOptions?: Jobs.RequestOptions): Promise<Flatfile.JobResponse>;
    get(jobId: Flatfile.JobId, requestOptions?: Jobs.RequestOptions): Promise<Flatfile.JobResponse>;
    update(jobId: Flatfile.JobId, request: Flatfile.JobUpdate, requestOptions?: Jobs.RequestOptions): Promise<Flatfile.JobResponse>;
    delete(jobId: Flatfile.JobId, requestOptions?: Jobs.RequestOptions): Promise<Flatfile.Success>;
    /**
     * Execute a job and return the job
     *
     * @example
     *     await flatfile.jobs.execute("us_jb_YOUR_ID")
     */
    execute(jobId: string, requestOptions?: Jobs.RequestOptions): Promise<Flatfile.Success>;
    /**
     * Returns a single job's execution plan
     *
     * @example
     *     await flatfile.jobs.getExecutionPlan("us_jb_YOUR_ID")
     */
    getExecutionPlan(jobId: Flatfile.JobId, requestOptions?: Jobs.RequestOptions): Promise<Flatfile.JobPlanResponse>;
    /**
     * Update a job's entire execution plan
     *
     * @example
     *     await flatfile.jobs.updateExecutionPlan("us_jb_YOUR_ID", {
     *         fieldMapping: [{
     *                 sourceField: {
     *                     type: "string",
     *                     key: "firstName"
     *                 },
     *                 destinationField: {
     *                     type: "string",
     *                     key: "firstName",
     *                     label: "First Name"
     *                 }
     *             }, {
     *                 sourceField: {
     *                     type: "string",
     *                     key: "lastName"
     *                 },
     *                 destinationField: {
     *                     type: "string",
     *                     key: "lastName",
     *                     label: "Last Name"
     *                 }
     *             }],
     *         unmappedSourceFields: [{
     *                 sourceField: {
     *                     type: "string",
     *                     key: "email"
     *                 }
     *             }],
     *         unmappedDestinationFields: [{
     *                 destinationField: {
     *                     type: "string",
     *                     key: "email",
     *                     label: "Email"
     *                 }
     *             }],
     *         fileId: "us_fl_YOUR_ID",
     *         jobId: "us_jb_YOUR_ID"
     *     })
     */
    updateExecutionPlan(jobId: Flatfile.JobId, request: Flatfile.JobExecutionPlanRequest, requestOptions?: Jobs.RequestOptions): Promise<Flatfile.JobPlanResponse>;
    /**
     * Update one or more individual fields on a job's execution plan
     */
    updateExecutionPlanFields(jobId: string, request: Flatfile.JobExecutionPlanConfigRequest, requestOptions?: Jobs.RequestOptions): Promise<Flatfile.JobPlanResponse>;
    /**
     * Acknowledge a job and return the job
     *
     * @example
     *     await flatfile.jobs.ack("us_jb_YOUR_ID", {
     *         info: "Acknowledged by user",
     *         progress: 100,
     *         estimatedCompletionAt: new Date("2023-10-30T20:04:32.074Z")
     *     })
     */
    ack(jobId: Flatfile.JobId, request?: Flatfile.JobAckDetails, requestOptions?: Jobs.RequestOptions): Promise<Flatfile.JobResponse>;
    /**
     * Acknowledge a job outcome and return the job
     *
     * @example
     *     await flatfile.jobs.ackOutcome("us_jb_YOUR_ID")
     */
    ackOutcome(jobId: Flatfile.JobId, requestOptions?: Jobs.RequestOptions): Promise<Flatfile.JobResponse>;
    /**
     * Complete a job and return the job
     *
     * @example
     *     await flatfile.jobs.complete("us_jb_YOUR_ID", {
     *         outcome: {
     *             acknowledge: true,
     *             buttonText: "Acknowledge",
     *             next: {
     *                 type: "id",
     *                 id: "us_jb_YOUR_ID"
     *             },
     *             heading: "Success",
     *             message: "Job was successful"
     *         },
     *         info: "Job is Complete"
     *     })
     */
    complete(jobId: Flatfile.JobId, request?: Flatfile.JobCompleteDetails, requestOptions?: Jobs.RequestOptions): Promise<Flatfile.JobResponse>;
    /**
     * Fail a job and return the job
     *
     * @example
     *     await flatfile.jobs.fail("us_jb_YOUR_ID", {
     *         outcome: {
     *             acknowledge: true,
     *             buttonText: "Acknowledge",
     *             next: {
     *                 type: "id",
     *                 id: "us_jb_YOUR_ID"
     *             },
     *             heading: "Failed",
     *             message: "Job failed"
     *         },
     *         info: "Job was failed"
     *     })
     */
    fail(jobId: Flatfile.JobId, request?: Flatfile.JobCompleteDetails, requestOptions?: Jobs.RequestOptions): Promise<Flatfile.JobResponse>;
    /**
     * Cancel a job and return the job
     *
     * @example
     *     await flatfile.jobs.cancel("us_jb_YOUR_ID", {
     *         info: "Job was canceled"
     *     })
     */
    cancel(jobId: Flatfile.JobId, request?: Flatfile.JobCancelDetails, requestOptions?: Jobs.RequestOptions): Promise<Flatfile.JobResponse>;
    /**
     * Retry a failt job and return the job
     */
    retry(jobId: Flatfile.JobId, requestOptions?: Jobs.RequestOptions): Promise<Flatfile.JobResponse>;
    /**
     * Preview the results of a mutation
     */
    previewMutation(request: Flatfile.MutateJobConfig, requestOptions?: Jobs.RequestOptions): Promise<Flatfile.DiffRecordsResponse>;
    /**
     * Split a job and return the job
     *
     * @example
     *     await flatfile.jobs.split("us_jb_YOUR_ID", {
     *         parts: [{}],
     *         runInParallel: true
     *     })
     */
    split(jobId: Flatfile.JobId, request: Flatfile.JobSplitDetails, requestOptions?: Jobs.RequestOptions): Promise<Flatfile.JobResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
