/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
export declare namespace Assistant {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Assistant {
    protected readonly _options: Assistant.Options;
    constructor(_options?: Assistant.Options);
    /**
     * Returns prompts created by user
     *
     * @example
     *     await flatfile.assistant.list()
     */
    list(request?: Flatfile.ListPromptsRequest, requestOptions?: Assistant.RequestOptions): Promise<Flatfile.PromptsResponse>;
    /**
     * Returns a prompt
     *
     * @example
     *     await flatfile.assistant.get("us_pr_YOUR_ID")
     */
    get(promptId: Flatfile.PromptId, requestOptions?: Assistant.RequestOptions): Promise<Flatfile.PromptResponse>;
    /**
     * Updates a prompt
     *
     * @example
     *     await flatfile.assistant.update("us_pr_YOUR_ID", {
     *         prompt: "Combine first name and last name into a new column called Full Name"
     *     })
     */
    update(promptId: Flatfile.PromptId, request: Flatfile.PromptPatch, requestOptions?: Assistant.RequestOptions): Promise<Flatfile.PromptResponse>;
    /**
     * Creates a prompt
     *
     * @example
     *     await flatfile.assistant.create({
     *         prompt: "Combine first name and last name into a new column called Full Name",
     *         environmentId: "us_env_YOUR_ID",
     *         spaceId: "us_sp_YOUR_ID"
     *     })
     */
    create(request: Flatfile.PromptCreate, requestOptions?: Assistant.RequestOptions): Promise<Flatfile.PromptResponse>;
    /**
     * Deletes a prompts
     *
     * @example
     *     await flatfile.assistant.delete("us_pr_YOUR_ID")
     */
    delete(promptId: Flatfile.PromptId, requestOptions?: Assistant.RequestOptions): Promise<Flatfile.Success>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
