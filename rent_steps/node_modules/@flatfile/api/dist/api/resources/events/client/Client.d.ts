/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
export declare namespace Events {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Events {
    protected readonly _options: Events.Options;
    constructor(_options?: Events.Options);
    /**
     * Event topics that the Flatfile Platform emits.
     *
     * @example
     *     await flatfile.events.list()
     */
    list(request?: Flatfile.ListEventsRequest, requestOptions?: Events.RequestOptions): Promise<Flatfile.ListAllEventsResponse>;
    /**
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.events.create({
     *         topic: Flatfile.EventTopic.WorkbookUpdated,
     *         payload: {
     *             "recordsAdded": 100
     *         },
     *         domain: Flatfile.Domain.Workbook,
     *         context: {
     *             accountId: "us_acc_YOUR_ID",
     *             actorId: "us_key_SOME_KEY",
     *             environmentId: "us_env_YOUR_ID",
     *             spaceId: "us_sp_YOUR_ID",
     *             workbookId: "us_wb_YOUR_ID"
     *         }
     *     })
     */
    create(request: Flatfile.CreateEventConfig, requestOptions?: Events.RequestOptions): Promise<Flatfile.EventResponse>;
    get(eventId: Flatfile.EventId, requestOptions?: Events.RequestOptions): Promise<Flatfile.EventResponse>;
    ack(eventId: Flatfile.EventId, requestOptions?: Events.RequestOptions): Promise<Flatfile.Success>;
    /**
     * Get a token which can be used to subscribe to events for this space
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.events.getEventToken()
     */
    getEventToken(request?: Flatfile.GetEventTokenRequest, requestOptions?: Events.RequestOptions): Promise<Flatfile.EventTokenResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
