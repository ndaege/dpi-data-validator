/**
 * This file was auto-generated by Fern from our API Definition.
 */
/// <reference types="node" />
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
import * as fs from "fs";
import * as stream from "stream";
export declare namespace Files {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Files {
    protected readonly _options: Files.Options;
    constructor(_options?: Files.Options);
    list(request?: Flatfile.ListFilesRequest, requestOptions?: Files.RequestOptions): Promise<Flatfile.ListFilesResponse>;
    /**
     * @throws {@link Flatfile.BadRequestError}
     */
    upload(file: File | fs.ReadStream, request: Flatfile.CreateFileRequest, requestOptions?: Files.RequestOptions): Promise<Flatfile.FileResponse>;
    /**
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.files.get("us_fl_YOUR_ID")
     */
    get(fileId: string, requestOptions?: Files.RequestOptions): Promise<Flatfile.FileResponse>;
    /**
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    delete(fileId: string, requestOptions?: Files.RequestOptions): Promise<Flatfile.Success>;
    /**
     * Update a file, to change the workbook id for example
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.files.update("us_fl_YOUR_ID", {
     *         name: "NewFileName"
     *     })
     */
    update(fileId: string, request?: Flatfile.UpdateFileRequest, requestOptions?: Files.RequestOptions): Promise<Flatfile.FileResponse>;
    /**
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    download(fileId: Flatfile.FileId, requestOptions?: Files.RequestOptions): Promise<stream.Readable>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
