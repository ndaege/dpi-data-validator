/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
export declare namespace Guests {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Guests {
    protected readonly _options: Guests.Options;
    constructor(_options?: Guests.Options);
    /**
     * Returns all guests
     *
     * @example
     *     await flatfile.guests.list({
     *         spaceId: "us_sp_YOUR_ID"
     *     })
     */
    list(request: Flatfile.ListGuestsRequest, requestOptions?: Guests.RequestOptions): Promise<Flatfile.ListGuestsResponse>;
    /**
     * Guests are only there to upload, edit, and download files and perform their tasks in a specific Space.
     *
     * @example
     *     await flatfile.guests.create([{
     *             environmentId: "us_env_YOUR_ID",
     *             email: "email@example.com",
     *             name: "Your Name",
     *             spaces: [{
     *                     id: "us_sp_YOUR_ID",
     *                     workbooks: [{
     *                             id: "us_wb_YOUR_ID"
     *                         }],
     *                     lastAccessed: new Date("2023-10-30T16:59:45.735Z")
     *                 }]
     *         }])
     */
    create(request: Flatfile.GuestConfig[], requestOptions?: Guests.RequestOptions): Promise<Flatfile.CreateGuestResponse>;
    /**
     * Returns a single guest
     *
     * @example
     *     await flatfile.guests.get("us_g_YOUR_ID")
     */
    get(guestId: Flatfile.GuestId, requestOptions?: Guests.RequestOptions): Promise<Flatfile.GuestResponse>;
    /**
     * Deletes a single guest
     *
     * @example
     *     await flatfile.guests.delete("us_g_YOUR_ID")
     */
    delete(guestId: Flatfile.GuestId, requestOptions?: Guests.RequestOptions): Promise<Flatfile.Success>;
    /**
     * Updates a single guest, for example to change name or email
     *
     * @example
     *     await flatfile.guests.update("us_g_YOUR_ID", {
     *         email: "updated@example.com",
     *         name: "Your Name Updated"
     *     })
     */
    update(guestId: Flatfile.GuestId, request: Flatfile.GuestConfigUpdate, requestOptions?: Guests.RequestOptions): Promise<Flatfile.GuestResponse>;
    /**
     * Returns a single guest token
     *
     * @example
     *     await flatfile.guests.getGuestToken("us_g_YOUR_ID")
     */
    getGuestToken(guestId: Flatfile.GuestId, request?: Flatfile.GetGuestTokenRequest, requestOptions?: Guests.RequestOptions): Promise<Flatfile.GuestTokenResponse>;
    /**
     * Lists roles assigned to a guest.
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     * @throws {@link Flatfile.ForbiddenError}
     */
    listGuestRoles(guestId: Flatfile.GuestId, requestOptions?: Guests.RequestOptions): Promise<Flatfile.ListActorRolesResponse>;
    /**
     * Assigns a role to a guest.
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     * @throws {@link Flatfile.ForbiddenError}
     */
    assignGuestRole(guestId: Flatfile.GuestId, request: Flatfile.AssignActorRoleRequest, requestOptions?: Guests.RequestOptions): Promise<Flatfile.AssignRoleResponse>;
    /**
     * Removes a role from a guest.
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     * @throws {@link Flatfile.ForbiddenError}
     */
    deleteGuestRole(guestId: Flatfile.GuestId, actorRoleId: Flatfile.ActorRoleId, requestOptions?: Guests.RequestOptions): Promise<Flatfile.Success>;
    /**
     * Guests can be created as a named guest on the Space or thereâ€™s a global link that will let anonymous guests into the space.
     *
     * @example
     *     await flatfile.guests.invite([{
     *             guestId: "us_g_YOUR_ID",
     *             spaceId: "us_sp_YOUR_ID",
     *             fromName: "Your Name",
     *             message: "Hello, I would like to invite you to my space."
     *         }])
     */
    invite(request: Flatfile.Invite[], requestOptions?: Guests.RequestOptions): Promise<Flatfile.Success>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
