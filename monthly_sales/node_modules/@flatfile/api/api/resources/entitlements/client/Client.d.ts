/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
export declare namespace Entitlements {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Entitlements {
    protected readonly _options: Entitlements.Options;
    constructor(_options?: Entitlements.Options);
    /**
     * Returns all entitlements matching a filter for resourceId
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await flatfile.entitlements.list({
     *         resourceId: "string"
     *     })
     */
    list(request: Flatfile.ListEntitlementsRequest, requestOptions?: Entitlements.RequestOptions): Promise<Flatfile.ListEntitlementsResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
